/*
 * Copyright (C) 2015 phramusca ( https://github.com/phramusca/JaMuz/ )
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jamuz.gui;

import jamuz.FileInfoInt;
import jamuz.IconBufferCover;
import jamuz.Jamuz;
import jamuz.Playlist;
import static jamuz.gui.PanelMain.addRowSelect;
import static jamuz.gui.PanelMain.initSelectTable;
import jamuz.Playlist.Field;
import jamuz.Playlist.Filter;
import jamuz.Playlist.LimitUnit;
import jamuz.Playlist.Match;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import jamuz.gui.swing.TableColumnModel;
import jamuz.gui.swing.TableModel;
import jamuz.utils.Inter;
import jamuz.utils.Popup;
import jamuz.utils.ProcessAbstract;
import jamuz.utils.StringManager;
import jamuz.utils.Swing;
import java.util.Collection;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;

/**
 *
 * @author phramusca ( https://github.com/phramusca/JaMuz/ )
 */
public class PanelPlaylists extends javax.swing.JPanel {

    private static FillPlaylistThread tFillPlaylistTable;
    private static TableModel tableModelPlaylist;
    private static final TableColumnModel columnModelPlaylist = new TableColumnModel();
    
    /**
     * Creates new form PanelPlaylists
     */
    public PanelPlaylists() {
        initComponents();
    }

    /**
     * extended init
     */
    public void initExtended() {
        enablePlaylistEdit(false);

        //Fills playlist combobox
        fillPlaylistCombo();

        //Get table model
        tableModelPlaylist = (TableModel) jTablePlaylist.getModel();
        initSelectTable(tableModelPlaylist, jTablePlaylist, columnModelPlaylist);
        //clear the table
        jTablePlaylist.setRowSorter(null);
        tableModelPlaylist.clear();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPanePlaylist = new javax.swing.JSplitPane();
        jPanelSelectTracks1 = new javax.swing.JPanel();
        jScrollPaneSelect1 = new javax.swing.JScrollPane();
        jTablePlaylist = new javax.swing.JTable();
        jPanelSelectDisplay1 = new javax.swing.JPanel();
        jLabelSelectDisplay1 = new javax.swing.JLabel();
        jToggleButtonPlaylistShowBasic = new javax.swing.JToggleButton();
        jToggleButtonPlaylistShowStats = new javax.swing.JToggleButton();
        jToggleButtonPlaylistShowFile = new javax.swing.JToggleButton();
        jToggleButtonPlaylistShowExtra = new javax.swing.JToggleButton();
        jLabelSelectedSummary = new javax.swing.JLabel();
        jPanelPlaylistEdit = new javax.swing.JPanel();
        jPanelPlaylist = new javax.swing.JPanel();
        jComboBoxPlaylist = new javax.swing.JComboBox();
        jButtonPlaylistNew = new javax.swing.JButton();
        jButtonPlaylistEdit = new javax.swing.JButton();
        jButtonPlaylistSave = new javax.swing.JButton();
        jButtonPlaylistDelete = new javax.swing.JButton();
        jButtonPlaylistShow = new javax.swing.JButton();
        jButtonPlaylistCancel = new javax.swing.JButton();
        jTextFieldPlaylistName = new javax.swing.JTextField();
        jPanelPlaylistFilters = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListPlaylistFilters = new javax.swing.JList();
        jButtonPlaylistFieldAdd = new javax.swing.JButton();
        jButtonPlaylistFilterDelete = new javax.swing.JButton();
        jButtonPlaylistFilterEdit = new javax.swing.JButton();
        jComboBoxPlaylistMatch = new JComboBox(Playlist.Match.values());
        jPanelPlaylistOrders = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPlaylistOrders = new javax.swing.JList();
        jButtonPlaylistOrderAdd = new javax.swing.JButton();
        jButtonPlaylisOrderDelete = new javax.swing.JButton();
        jCheckBoxRandom = new javax.swing.JCheckBox();
        jButtonPlaylistOrderEdit = new javax.swing.JButton();
        jPanelPlaylistLimit = new javax.swing.JPanel();
        jComboBoxLimitUnit = new JComboBox(Playlist.LimitUnit.values());
        jSpinnerLimitValue = new javax.swing.JSpinner();
        jCheckBoxLimit = new javax.swing.JCheckBox();
        jCheckBoxHidden = new javax.swing.JCheckBox();

        jSplitPanePlaylist.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTablePlaylist.setAutoCreateColumnsFromModel(false);
        jTablePlaylist.setModel(new jamuz.gui.swing.TableModel());
        jTablePlaylist.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPaneSelect1.setViewportView(jTablePlaylist);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("jamuz/Bundle"); // NOI18N
        jLabelSelectDisplay1.setText(bundle.getString("Label.Display")); // NOI18N

        jToggleButtonPlaylistShowBasic.setSelected(true);
        jToggleButtonPlaylistShowBasic.setText(bundle.getString("Label.Basic")); // NOI18N
        jToggleButtonPlaylistShowBasic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlaylistShowBasicActionPerformed(evt);
            }
        });

        jToggleButtonPlaylistShowStats.setText(bundle.getString("Label.Statistics")); // NOI18N
        jToggleButtonPlaylistShowStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlaylistShowStatsActionPerformed(evt);
            }
        });

        jToggleButtonPlaylistShowFile.setText(bundle.getString("Label.File")); // NOI18N
        jToggleButtonPlaylistShowFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlaylistShowFileActionPerformed(evt);
            }
        });

        jToggleButtonPlaylistShowExtra.setText(bundle.getString("Label.Extra")); // NOI18N
        jToggleButtonPlaylistShowExtra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlaylistShowExtraActionPerformed(evt);
            }
        });

        jLabelSelectedSummary.setText(" ");

        javax.swing.GroupLayout jPanelSelectDisplay1Layout = new javax.swing.GroupLayout(jPanelSelectDisplay1);
        jPanelSelectDisplay1.setLayout(jPanelSelectDisplay1Layout);
        jPanelSelectDisplay1Layout.setHorizontalGroup(
            jPanelSelectDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSelectDisplay1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSelectDisplay1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonPlaylistShowBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonPlaylistShowStats)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonPlaylistShowFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonPlaylistShowExtra)
                .addGap(18, 18, 18)
                .addComponent(jLabelSelectedSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelSelectDisplay1Layout.setVerticalGroup(
            jPanelSelectDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSelectDisplay1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanelSelectDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSelectDisplay1)
                    .addComponent(jToggleButtonPlaylistShowBasic)
                    .addComponent(jToggleButtonPlaylistShowStats)
                    .addComponent(jToggleButtonPlaylistShowFile)
                    .addComponent(jToggleButtonPlaylistShowExtra)
                    .addComponent(jLabelSelectedSummary))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelSelectTracks1Layout = new javax.swing.GroupLayout(jPanelSelectTracks1);
        jPanelSelectTracks1.setLayout(jPanelSelectTracks1Layout);
        jPanelSelectTracks1Layout.setHorizontalGroup(
            jPanelSelectTracks1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSelectDisplay1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPaneSelect1, javax.swing.GroupLayout.DEFAULT_SIZE, 952, Short.MAX_VALUE)
        );
        jPanelSelectTracks1Layout.setVerticalGroup(
            jPanelSelectTracks1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSelectTracks1Layout.createSequentialGroup()
                .addComponent(jScrollPaneSelect1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelSelectDisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPanePlaylist.setBottomComponent(jPanelSelectTracks1);

        jPanelPlaylist.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Label.Playlist"))); // NOI18N

        jComboBoxPlaylist.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Playlist sample 1", "Playlist sample 2", "Playlist sample 3", "Playlist sample 4" }));
        jComboBoxPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPlaylistActionPerformed(evt);
            }
        });

        jButtonPlaylistNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/add.png"))); // NOI18N
        jButtonPlaylistNew.setText(bundle.getString("Button.Add")); // NOI18N
        jButtonPlaylistNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistNewActionPerformed(evt);
            }
        });

        jButtonPlaylistEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/application_form_edit.png"))); // NOI18N
        jButtonPlaylistEdit.setText(bundle.getString("Button.Edit")); // NOI18N
        jButtonPlaylistEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistEditActionPerformed(evt);
            }
        });

        jButtonPlaylistSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/accept.png"))); // NOI18N
        jButtonPlaylistSave.setText(bundle.getString("Button.Save")); // NOI18N
        jButtonPlaylistSave.setEnabled(false);
        jButtonPlaylistSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistSaveActionPerformed(evt);
            }
        });

        jButtonPlaylistDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/bin.png"))); // NOI18N
        jButtonPlaylistDelete.setText(bundle.getString("Button.Delete")); // NOI18N
        jButtonPlaylistDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistDeleteActionPerformed(evt);
            }
        });

        jButtonPlaylistShow.setText(bundle.getString("Button.Show")); // NOI18N
        jButtonPlaylistShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistShowActionPerformed(evt);
            }
        });

        jButtonPlaylistCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/cancel.png"))); // NOI18N
        jButtonPlaylistCancel.setText(Inter.get("Button.Cancel")); // NOI18N
        jButtonPlaylistCancel.setEnabled(false);
        jButtonPlaylistCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlaylistLayout = new javax.swing.GroupLayout(jPanelPlaylist);
        jPanelPlaylist.setLayout(jPanelPlaylistLayout);
        jPanelPlaylistLayout.setHorizontalGroup(
            jPanelPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistLayout.createSequentialGroup()
                .addComponent(jButtonPlaylistNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPlaylistEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPlaylistCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPlaylistSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPlaylistDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelPlaylistLayout.createSequentialGroup()
                .addComponent(jComboBoxPlaylist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldPlaylistName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPlaylistShow))
        );
        jPanelPlaylistLayout.setVerticalGroup(
            jPanelPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistLayout.createSequentialGroup()
                .addGroup(jPanelPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPlaylistName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPlaylistShow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPlaylistNew)
                    .addComponent(jButtonPlaylistEdit)
                    .addComponent(jButtonPlaylistSave)
                    .addComponent(jButtonPlaylistDelete)
                    .addComponent(jButtonPlaylistCancel))
                .addContainerGap())
        );

        jPanelPlaylistFilters.setBorder(javax.swing.BorderFactory.createTitledBorder("Filters"));

        jListPlaylistFilters.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(jListPlaylistFilters);

        jButtonPlaylistFieldAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/add.png"))); // NOI18N
        jButtonPlaylistFieldAdd.setText(bundle.getString("Button.Add")); // NOI18N
        jButtonPlaylistFieldAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistFieldAddActionPerformed(evt);
            }
        });

        jButtonPlaylistFilterDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/bin.png"))); // NOI18N
        jButtonPlaylistFilterDelete.setText(bundle.getString("Button.Delete")); // NOI18N
        jButtonPlaylistFilterDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistFilterDeleteActionPerformed(evt);
            }
        });

        jButtonPlaylistFilterEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/application_form_edit.png"))); // NOI18N
        jButtonPlaylistFilterEdit.setText(bundle.getString("Button.Edit")); // NOI18N
        jButtonPlaylistFilterEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistFilterEditActionPerformed(evt);
            }
        });

        jComboBoxPlaylistMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPlaylistMatchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlaylistFiltersLayout = new javax.swing.GroupLayout(jPanelPlaylistFilters);
        jPanelPlaylistFilters.setLayout(jPanelPlaylistFiltersLayout);
        jPanelPlaylistFiltersLayout.setHorizontalGroup(
            jPanelPlaylistFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistFiltersLayout.createSequentialGroup()
                .addGroup(jPanelPlaylistFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlaylistFiltersLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPlaylistFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonPlaylistFieldAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonPlaylistFilterEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonPlaylistFilterDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jComboBoxPlaylistMatch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelPlaylistFiltersLayout.setVerticalGroup(
            jPanelPlaylistFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistFiltersLayout.createSequentialGroup()
                .addGroup(jPanelPlaylistFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlaylistFiltersLayout.createSequentialGroup()
                        .addComponent(jButtonPlaylistFieldAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlaylistFilterEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlaylistFilterDelete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxPlaylistMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelPlaylistOrders.setBorder(javax.swing.BorderFactory.createTitledBorder("Order By"));

        jListPlaylistOrders.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(jListPlaylistOrders);

        jButtonPlaylistOrderAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/add.png"))); // NOI18N
        jButtonPlaylistOrderAdd.setText(bundle.getString("Button.Add")); // NOI18N
        jButtonPlaylistOrderAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistOrderAddActionPerformed(evt);
            }
        });

        jButtonPlaylisOrderDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/bin.png"))); // NOI18N
        jButtonPlaylisOrderDelete.setText(bundle.getString("Button.Delete")); // NOI18N
        jButtonPlaylisOrderDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylisOrderDeleteActionPerformed(evt);
            }
        });

        jCheckBoxRandom.setText("Random");
        jCheckBoxRandom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxRandomItemStateChanged(evt);
            }
        });

        jButtonPlaylistOrderEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/application_form_edit.png"))); // NOI18N
        jButtonPlaylistOrderEdit.setText(bundle.getString("Button.Edit")); // NOI18N
        jButtonPlaylistOrderEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlaylistOrderEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlaylistOrdersLayout = new javax.swing.GroupLayout(jPanelPlaylistOrders);
        jPanelPlaylistOrders.setLayout(jPanelPlaylistOrdersLayout);
        jPanelPlaylistOrdersLayout.setHorizontalGroup(
            jPanelPlaylistOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistOrdersLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlaylistOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBoxRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonPlaylisOrderDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonPlaylistOrderEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonPlaylistOrderAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelPlaylistOrdersLayout.setVerticalGroup(
            jPanelPlaylistOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistOrdersLayout.createSequentialGroup()
                .addGroup(jPanelPlaylistOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlaylistOrdersLayout.createSequentialGroup()
                        .addComponent(jCheckBoxRandom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlaylistOrderAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlaylistOrderEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlaylisOrderDelete)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        jPanelPlaylistLimit.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jComboBoxLimitUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLimitUnitActionPerformed(evt);
            }
        });

        jSpinnerLimitValue.setModel(new javax.swing.SpinnerNumberModel(10, 1, null, 1));
        jSpinnerLimitValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerLimitValueStateChanged(evt);
            }
        });

        jCheckBoxLimit.setText("Limit to"); // NOI18N
        jCheckBoxLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLimitActionPerformed(evt);
            }
        });

        jCheckBoxHidden.setText("Hidden");
        jCheckBoxHidden.setEnabled(false);
        jCheckBoxHidden.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxHiddenItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlaylistLimitLayout = new javax.swing.GroupLayout(jPanelPlaylistLimit);
        jPanelPlaylistLimit.setLayout(jPanelPlaylistLimitLayout);
        jPanelPlaylistLimitLayout.setHorizontalGroup(
            jPanelPlaylistLimitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistLimitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxLimit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerLimitValue, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxLimitUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxHidden)
                .addContainerGap())
        );
        jPanelPlaylistLimitLayout.setVerticalGroup(
            jPanelPlaylistLimitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistLimitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBoxLimit)
                .addComponent(jSpinnerLimitValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jComboBoxLimitUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCheckBoxHidden))
        );

        javax.swing.GroupLayout jPanelPlaylistEditLayout = new javax.swing.GroupLayout(jPanelPlaylistEdit);
        jPanelPlaylistEdit.setLayout(jPanelPlaylistEditLayout);
        jPanelPlaylistEditLayout.setHorizontalGroup(
            jPanelPlaylistEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlaylistEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelPlaylistLimit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPlaylistFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPlaylistOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelPlaylistEditLayout.setVerticalGroup(
            jPanelPlaylistEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlaylistEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlaylistEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlaylistEditLayout.createSequentialGroup()
                        .addComponent(jPanelPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelPlaylistLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelPlaylistFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelPlaylistOrders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jSplitPanePlaylist.setLeftComponent(jPanelPlaylistEdit);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPanePlaylist, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPanePlaylist)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonPlaylistShowBasicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlaylistShowBasicActionPerformed
        PanelMain.setBasicVisible(columnModelPlaylist, jToggleButtonPlaylistShowBasic.isSelected());
    }//GEN-LAST:event_jToggleButtonPlaylistShowBasicActionPerformed

    private void jToggleButtonPlaylistShowStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlaylistShowStatsActionPerformed
        PanelMain.setStatsVisible(columnModelPlaylist, jToggleButtonPlaylistShowStats.isSelected());
    }//GEN-LAST:event_jToggleButtonPlaylistShowStatsActionPerformed

    private void jToggleButtonPlaylistShowFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlaylistShowFileActionPerformed
        PanelMain.setFileVisible(columnModelPlaylist, jToggleButtonPlaylistShowFile.isSelected());
    }//GEN-LAST:event_jToggleButtonPlaylistShowFileActionPerformed

    private void jToggleButtonPlaylistShowExtraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlaylistShowExtraActionPerformed
        PanelMain.setExtraVisible(columnModelPlaylist, jToggleButtonPlaylistShowExtra.isSelected());
        if (jToggleButtonPlaylistShowExtra.isSelected()) {
            jTablePlaylist.setRowHeight(IconBufferCover.getCoverIconSize());
        } else {
            jTablePlaylist.setRowHeight(16);
        }
    }//GEN-LAST:event_jToggleButtonPlaylistShowExtraActionPerformed

    private void jComboBoxPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPlaylistActionPerformed
        if (jComboBoxPlaylist.getSelectedIndex() > 0) {
            //Display playlist
            Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();

            jCheckBoxLimit.setSelected(playlist.isLimit());
            jSpinnerLimitValue.setValue(playlist.getLimitValue());
            jComboBoxLimitUnit.setSelectedItem(playlist.getLimitUnit());
            jComboBoxPlaylistMatch.setSelectedItem(playlist.getMatch());
            //            jComboBoxPlaylistType.setSelectedItem(playlist.type);

            jCheckBoxRandom.setSelected(playlist.isRandom());
			
			jCheckBoxHidden.setSelected(playlist.isHidden());

            //Display filters
            displayFilters(playlist);

            //Display orders
            displayOrders(playlist);

            //Display files for that playlist
            //             if(playlist.getFilters().size()>0) {
                fillPlayList();
                //             }
        }
    }//GEN-LAST:event_jComboBoxPlaylistActionPerformed

    private void jButtonPlaylistNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistNewActionPerformed
        String input = JOptionPane.showInputDialog(null, Inter.get("Msg.Playlist.EnterName"), "");  //NOI18N
        if (input != null) {
            DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBoxPlaylist.getModel();
            if (model.getIndexOf(input) > -1) {
                Popup.warning(MessageFormat.format(Inter.get("Playlist.NameAlreadyExist"), input));  //NOI18N
            } else if (!input.equals("")) {  //NOI18N
                Playlist playlist = new Playlist(0, input, false, 1, LimitUnit.Gio, false,
                    Playlist.Type.Songs, Match.All, false);

                if (playlist.insert()) {
                    fillPlaylistCombo();
                    jComboBoxPlaylist.setSelectedItem(playlist);
                    jTextFieldPlaylistName.setText(((Playlist) jComboBoxPlaylist.getSelectedItem()).getName());
                    enablePlaylistEdit(true);
                }
            }
        }
    }//GEN-LAST:event_jButtonPlaylistNewActionPerformed

    private ArrayList<Playlist.Filter> tempFilters;
    
    private void jButtonPlaylistEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistEditActionPerformed
        if (jComboBoxPlaylist.getSelectedIndex() > 0) {
            tempFilters = new ArrayList<>();
            jTextFieldPlaylistName.setText(((Playlist) jComboBoxPlaylist.getSelectedItem()).getName());
            enablePlaylistEdit(true);
        }
    }//GEN-LAST:event_jButtonPlaylistEditActionPerformed

    private void jButtonPlaylistSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistSaveActionPerformed
        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
        String newName=jTextFieldPlaylistName.getText();
        if(!newName.equals(playlist.getName())) {       
//            Collection<String> playlists = CollectionUtils.collect(Jamuz.getPlaylists(), new Transformer() {
//                @Override
//                public Object transform(Object input) {
//                    final Playlist playlist = (Playlist) input;
//                    return playlist.getName();
//                }
//            });
//            if(playlists.contains(newName)) {
//                Popup.warning("Playlist name already exist !");
//                return;
//            }
            
            DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBoxPlaylist.getModel();
            if (model.getIndexOf(newName) > -1) {
                Popup.warning(MessageFormat.format(Inter.get("Playlist.NameAlreadyExist"), newName));  //NOI18N
            } else if (!newName.equals("")) {  //NOI18N
                playlist.setName(newName);
            }
            
            
        }
        
        playlist.update();
        //TODO: playlist is displayed twice (need only one):
        //when list is filled and when playlist is selected in list (to be confirmed)
        fillPlaylistCombo();
        playlist = Jamuz.getPlaylist(playlist.getId()); //because playlist object has changed
        jComboBoxPlaylist.setSelectedItem(playlist);
        enablePlaylistEdit(false);
    }//GEN-LAST:event_jButtonPlaylistSaveActionPerformed

    private void jButtonPlaylistDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistDeleteActionPerformed
            if (jComboBoxPlaylist.getSelectedIndex() > 0) {
                int n = JOptionPane.showConfirmDialog(
                    this, Inter.get("Question.DeletePlaylist"), //NOI18N
                    Inter.get("Label.Confirm"), //NOI18N
                    JOptionPane.YES_NO_OPTION);
                if (n == JOptionPane.YES_OPTION) {
                    Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
                    if (playlist.delete()) {
                        fillPlaylistCombo();
                    }
                }
            }
    }//GEN-LAST:event_jButtonPlaylistDeleteActionPerformed

    private void jButtonPlaylistShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistShowActionPerformed
        if (jComboBoxPlaylist.getSelectedIndex() > 0) {
            fillPlayList();
        }
    }//GEN-LAST:event_jButtonPlaylistShowActionPerformed

    private void jButtonPlaylistFieldAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistFieldAddActionPerformed
        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
        DialogPlaylistFilter.main(playlist, -1, jComboBoxPlaylistMatch.getSelectedItem() == Playlist.Match.Inde);
    }//GEN-LAST:event_jButtonPlaylistFieldAddActionPerformed

    private void jButtonPlaylistFilterDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistFilterDeleteActionPerformed
        if (jListPlaylistFilters.getSelectedIndex() > -1) {
            //Remove filter from playlist
            Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
            playlist.removeFilter(jListPlaylistFilters.getSelectedIndex());
            //Remove filter from display
            DefaultListModel listModelFilters = (DefaultListModel) jListPlaylistFilters.getModel();
            listModelFilters.removeElementAt(jListPlaylistFilters.getSelectedIndex());
            PanelPlaylists.fillPlayList();
        }
    }//GEN-LAST:event_jButtonPlaylistFilterDeleteActionPerformed

    private void jButtonPlaylistFilterEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistFilterEditActionPerformed
        if (jListPlaylistFilters.getSelectedIndex() > -1) {
            int filterIndex = jListPlaylistFilters.getSelectedIndex();
            Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
            DialogPlaylistFilter.main(playlist, filterIndex, jComboBoxPlaylistMatch.getSelectedItem() == Playlist.Match.Inde);
        }
    }//GEN-LAST:event_jButtonPlaylistFilterEditActionPerformed

    private void jComboBoxPlaylistMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPlaylistMatchActionPerformed

        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
        playlist.setMatch((Match) jComboBoxPlaylistMatch.getSelectedItem());

        if (jButtonPlaylistSave.isEnabled()) {
            //We are in edition mode
            if (playlist.getMatch().equals(Match.Inde)) {
                //Backup non-playlists filters
                tempFilters = new ArrayList<>();

                //Using an iterator instead of foreach as we may need to remove elements from list
                Iterator<Filter> i = playlist.getFilters().iterator();
                while (i.hasNext()) {
                    Filter filter = i.next();
                    if (!filter.getField().equals(Field.PLAYLIST)) {
                        tempFilters.add(filter);
                        i.remove();
                    }
                }
                //Display filters in list
                displayFilters(playlist);
                PanelPlaylists.fillPlayList();
            } else {
                //Restore backed up non-playlists filters
                for (Filter filter : tempFilters) {
                    playlist.addFilter(filter);
                }
                tempFilters = new ArrayList<>();
                //Display filters in list
                displayFilters(playlist);
                PanelPlaylists.fillPlayList();
            }
        }
    }//GEN-LAST:event_jComboBoxPlaylistMatchActionPerformed

    private void jButtonPlaylistOrderAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistOrderAddActionPerformed
        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
        DialogPlaylistOrder.main(playlist, -1);
    }//GEN-LAST:event_jButtonPlaylistOrderAddActionPerformed

    private void jButtonPlaylisOrderDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylisOrderDeleteActionPerformed
        if (jListPlaylistOrders.getSelectedIndex() > -1) {
            //Remove filter from playlist
            Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
            playlist.removeOrder(jListPlaylistOrders.getSelectedIndex());
            //Remove filter from display
            DefaultListModel listModelOrders = (DefaultListModel) jListPlaylistOrders.getModel();
            listModelOrders.removeElementAt(jListPlaylistOrders.getSelectedIndex());
            PanelPlaylists.fillPlayList();
        }
    }//GEN-LAST:event_jButtonPlaylisOrderDeleteActionPerformed

    private void jButtonPlaylistOrderEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistOrderEditActionPerformed
        if (jListPlaylistOrders.getSelectedIndex() > -1) {
            int orderIndex = jListPlaylistOrders.getSelectedIndex();
            Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
            DialogPlaylistOrder.main(playlist, orderIndex);
        }
    }//GEN-LAST:event_jButtonPlaylistOrderEditActionPerformed

    private void jComboBoxLimitUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLimitUnitActionPerformed
        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
        playlist.setLimitUnit((LimitUnit) jComboBoxLimitUnit.getSelectedItem());
    }//GEN-LAST:event_jComboBoxLimitUnitActionPerformed

    private void jSpinnerLimitValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerLimitValueStateChanged
        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
        playlist.setLimitValue((int) jSpinnerLimitValue.getValue());
    }//GEN-LAST:event_jSpinnerLimitValueStateChanged

    private void jCheckBoxLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLimitActionPerformed
        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
        playlist.setLimit(jCheckBoxLimit.isSelected());
    }//GEN-LAST:event_jCheckBoxLimitActionPerformed

    private void jButtonPlaylistCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlaylistCancelActionPerformed
        //Reset the playlists
        fillPlaylistCombo();
        //Disable edition
        enablePlaylistEdit(false);
    }//GEN-LAST:event_jButtonPlaylistCancelActionPerformed

	//TODO: Update all other jCheckBox using StateChanged to use ItemStateChanged instead 
	//(search all, breakpoint and check if current behavior is expected first)
    private void jCheckBoxRandomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxRandomItemStateChanged
        if (jButtonPlaylistSave.isEnabled()) {
            enableOrder(!jCheckBoxRandom.isSelected());
            Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
            playlist.setRandom(jCheckBoxRandom.isSelected());
            fillPlayList();
        }
    }//GEN-LAST:event_jCheckBoxRandomItemStateChanged

    private void jCheckBoxHiddenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxHiddenItemStateChanged
        Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
		playlist.setHidden(jCheckBoxHidden.isSelected());
    }//GEN-LAST:event_jCheckBoxHiddenItemStateChanged

    public static void fillPlayList() {
        //Stop any previously running thread and wait for it to end
        if (tFillPlaylistTable != null) {
            tFillPlaylistTable.abort();
            try {
                tFillPlaylistTable.join();
            } catch (InterruptedException ex) {
                Popup.error(ex);
            }
        }

        // Démarrage du thread
        tFillPlaylistTable = new FillPlaylistThread("Thread.PanelPlaylists.FillPlaylistTable");
        tFillPlaylistTable.start();
    }

    private static class FillPlaylistThread extends ProcessAbstract {

        public FillPlaylistThread(String name) {
            super(name);
        }
        
        @Override
        public void run() {
            try {
                this.resetAbort();
                //clear the table
                jTablePlaylist.setRowSorter(null);
                tableModelPlaylist.clear();
                //Get playlist's files
                Playlist playlist = (Playlist) jComboBoxPlaylist.getSelectedItem();
                ArrayList<FileInfoInt> fileInfoSourceList = new ArrayList<>();
                playlist.getFiles(fileInfoSourceList);
                
                long totalLength = fileInfoSourceList.stream().mapToLong(o -> o.getLength()).sum();
                long totalSize = fileInfoSourceList.stream().mapToLong(o -> o.getSize()).sum();
                
                 jLabelSelectedSummary.setText(fileInfoSourceList.size()+" file(s)"
                        +" ; "+StringManager.humanReadableSeconds(totalLength)
                        +" ; "+StringManager.humanReadableByteCount(totalSize, false));
                
                for (FileInfoInt myFileInfoInt : fileInfoSourceList) {
                    this.checkAbort();
                    addRowSelect(tableModelPlaylist, myFileInfoInt);
                }
                //Not allowing sorter as playlists are sorted !
                jTablePlaylist.setAutoCreateRowSorter(false);
            } catch (InterruptedException ex) {
//                Popup.info(Inter.get("Msg.Process.Aborted"));  //NOI18N
            }

        }
    }
    
    private void enablePlaylistEdit(boolean enable) {
        //Buttons
        jComboBoxPlaylist.setEnabled(!enable);
        jTextFieldPlaylistName.setEnabled(enable);
        jComboBoxPlaylist.setVisible(!enable);
        jTextFieldPlaylistName.setVisible(enable);
        
        jButtonPlaylistNew.setEnabled(!enable);
        jButtonPlaylistNew.setVisible(!enable);
        jButtonPlaylistEdit.setEnabled(!enable);
        jButtonPlaylistEdit.setVisible(!enable);
        jButtonPlaylistDelete.setEnabled(!enable);
        jButtonPlaylistDelete.setVisible(!enable);
        jButtonPlaylistSave.setEnabled(enable);
        jButtonPlaylistSave.setVisible(enable);
        jButtonPlaylistCancel.setEnabled(enable);
        jButtonPlaylistCancel.setVisible(enable);
        //Fields
        Swing.enableComponents(jPanelPlaylistLimit, enable);
        Swing.enableComponents(jPanelPlaylistFilters, enable);
        Swing.enableComponents(jPanelPlaylistOrders, enable);
    }
    
       /**
     * Display filters
     *
     * @param playlist
     */
    public static void displayFilters(Playlist playlist) {
        DefaultListModel listModelFilters = (DefaultListModel) jListPlaylistFilters.getModel();
        listModelFilters.removeAllElements();
        for (Playlist.Filter filter : playlist.getFilters()) {
            listModelFilters.addElement(filter);
        }
            //TODO: Use something like below (works for combox, why not for lists ?)
        //so we may not have to refresh, may be done automatically then
//            jListPlaylistFilters.setModel(new DefaultListModel(playlist.getFilters().toArray()));
    }

    /**
     * Display orders
     *
     * @param playlist
     */
    public static void displayOrders(Playlist playlist) {
        DefaultListModel listModelOrders = (DefaultListModel) jListPlaylistOrders.getModel();
        listModelOrders.removeAllElements();
        for (Playlist.Order order : playlist.getOrders()) {
            listModelOrders.addElement(order);
        }
		//TODO: Use something like below (works for combox, why not for lists ?)
        //so we may not have to refresh, may be done automatically then
//            jListPlaylistFilters.setModel(new DefaultListModel(playlist.getFilters().toArray()));
    }
    
    private void enableOrder(boolean enable) {
        jListPlaylistOrders.setEnabled(enable);
        jButtonPlaylisOrderDelete.setEnabled(enable);
        jButtonPlaylistOrderAdd.setEnabled(enable);
        jButtonPlaylistOrderEdit.setEnabled(enable);
    }
    

    private void fillPlaylistCombo() {
        tempFilters = new ArrayList<>();
        Jamuz.readPlaylists();
        DefaultComboBoxModel comboModelPlaylist = (DefaultComboBoxModel) jComboBoxPlaylist.getModel();
        
        //FIXME: Set back the previously selected entry (if still exists) at the end in PanelMain.comboPlaylistsModel
        //=> What about the queue ?
        comboModelPlaylist.removeAllElements();
        PanelMain.comboPlaylistsModel.removeAllElements();
        comboModelPlaylist.addElement(Inter.get("Label.SelectOne")); //NOI18N
        
        PanelMain.comboPlaylistsModel.addElement(Inter.get("Label.None")); //NOI18N
        PanelMain.comboPlaylistsModel.addElement(Inter.get("Label.Selected")); //NOI18N
        for (Playlist playlist : Jamuz.getPlaylists()) {
            comboModelPlaylist.addElement(playlist);
        }
		for (Playlist playlist : Jamuz.getPlaylistsVisible()) {
            PanelMain.comboPlaylistsModel.addElement(playlist);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPlaylisOrderDelete;
    private javax.swing.JButton jButtonPlaylistCancel;
    private javax.swing.JButton jButtonPlaylistDelete;
    private javax.swing.JButton jButtonPlaylistEdit;
    private javax.swing.JButton jButtonPlaylistFieldAdd;
    private javax.swing.JButton jButtonPlaylistFilterDelete;
    private javax.swing.JButton jButtonPlaylistFilterEdit;
    private javax.swing.JButton jButtonPlaylistNew;
    private javax.swing.JButton jButtonPlaylistOrderAdd;
    private javax.swing.JButton jButtonPlaylistOrderEdit;
    private javax.swing.JButton jButtonPlaylistSave;
    private javax.swing.JButton jButtonPlaylistShow;
    private javax.swing.JCheckBox jCheckBoxHidden;
    private javax.swing.JCheckBox jCheckBoxLimit;
    private javax.swing.JCheckBox jCheckBoxRandom;
    private javax.swing.JComboBox jComboBoxLimitUnit;
    private static javax.swing.JComboBox jComboBoxPlaylist;
    private static javax.swing.JComboBox jComboBoxPlaylistMatch;
    private javax.swing.JLabel jLabelSelectDisplay1;
    private static javax.swing.JLabel jLabelSelectedSummary;
    private static javax.swing.JList jListPlaylistFilters;
    private static javax.swing.JList jListPlaylistOrders;
    private javax.swing.JPanel jPanelPlaylist;
    private javax.swing.JPanel jPanelPlaylistEdit;
    private javax.swing.JPanel jPanelPlaylistFilters;
    private javax.swing.JPanel jPanelPlaylistLimit;
    private javax.swing.JPanel jPanelPlaylistOrders;
    private javax.swing.JPanel jPanelSelectDisplay1;
    private javax.swing.JPanel jPanelSelectTracks1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneSelect1;
    private javax.swing.JSpinner jSpinnerLimitValue;
    private javax.swing.JSplitPane jSplitPanePlaylist;
    private static javax.swing.JTable jTablePlaylist;
    private javax.swing.JTextField jTextFieldPlaylistName;
    private javax.swing.JToggleButton jToggleButtonPlaylistShowBasic;
    private javax.swing.JToggleButton jToggleButtonPlaylistShowExtra;
    private javax.swing.JToggleButton jToggleButtonPlaylistShowFile;
    private javax.swing.JToggleButton jToggleButtonPlaylistShowStats;
    // End of variables declaration//GEN-END:variables
}
