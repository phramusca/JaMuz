/*
 * Copyright (C) 2014 phramusca ( https://github.com/phramusca/JaMuz/ )
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package jamuz.gui;

import jamuz.gui.swing.PanelPieChart;
import jamuz.DbConnJaMuz.StatItem;
import jamuz.process.check.FolderInfo;
import jamuz.Jamuz;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Random;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JSlider;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import jamuz.gui.swing.TableModel;
import jamuz.utils.Inter;
import jamuz.utils.Popup;
import jamuz.utils.StringManager;

/**
 *
 * @author phramusca ( https://github.com/phramusca/JaMuz/ )
 */
public class PanelStats extends javax.swing.JPanel {

    private static TableModel tableModel;
    
    private static ArrayList<StatItem> stats = new ArrayList<>();
    private Color myColors[];
    
    /**
     * Creates new form PanelStats
     */
    public PanelStats() {
        initComponents();
    }
    
    /**
     * extended gui init
     */
    public void initExtended() {
		
		jSliderStatsNbCategories.setEnabled(false);
		jSliderStatsNbCategories.setValue(6);
		
		//Get table model
		tableModel = (TableModel) jTableStats.getModel();
		//Set model
		String[] columnNames = {"# file", "# album", "%", "Length", "Rating", "Size", ""};  //NOI18N
		Object[][] data = {
			{0, 0, 0, 0, 0, 0, "Default"}  //NOI18N
		};
		tableModel.setModel(columnNames, data);
		//Clear model
		tableModel.clear();

		TableColumn column;
		//Set "#" column width
		column = jTableStats.getColumnModel().getColumn(0);
		column.setMinWidth(100);
		column.setPreferredWidth(100);
	
		//Set "#" column width
		column = jTableStats.getColumnModel().getColumn(1);
		column.setMinWidth(100);
		column.setPreferredWidth(100);
		
        //Set "%" column width
		column = jTableStats.getColumnModel().getColumn(2);
		column.setMinWidth(40);
		column.setMaxWidth(40);

        //"Length"
        column = jTableStats.getColumnModel().getColumn(3);
		column.setMinWidth(170);
		column.setPreferredWidth(170);
        
        //"Rating"
        column = jTableStats.getColumnModel().getColumn(4);
		column.setMinWidth(50);
		column.setPreferredWidth(50);
        
        //"Size"
        column = jTableStats.getColumnModel().getColumn(5);
		column.setMinWidth(150);
		column.setPreferredWidth(150);
        
		//Set "Label" column width
		column = jTableStats.getColumnModel().getColumn(6);
//		column.setMinWidth(20);
		column.setPreferredWidth(500);
		
		//Define chart colors
		myColors = new Color [21];
        myColors [0]= new Color(255,80,5);
        myColors [1]= new Color(0,117,220);
        myColors [2]= new Color(153,63,0);
        myColors [3]= new Color(76,0,92);
        myColors [4]= new Color(25,25,25);
        myColors [5]= new Color(0,92,49);
        myColors [6]= new Color(43,206,72);
        myColors [7]= new Color(255,204,153);
        myColors [8]= new Color(128,128,128);
        myColors [9]= new Color(148,255,181);
        myColors [10]= new Color(143,124,0);
        myColors [11]= new Color(157,204,0);
        myColors [12]= new Color(194,0,136);
        myColors [13]= new Color(0,51,128);
        myColors [14]= new Color(255,164,5);
        myColors [15]= new Color(255,168,187);
        myColors [16]= new Color(66,102,0);
        myColors [17]= new Color(255,0,16);
        myColors [18]= new Color(94,241,242);
        myColors [19]= new Color(0,153,143);
        myColors [20]= new Color(224,255,102);
        
        //Set default radio button to display its stats
        jRadioStatRating.setSelected(true);
        isManual = true;
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupStat = new javax.swing.ButtonGroup();
        jSliderStatsNbCategories = new javax.swing.JSlider();
        jScrollPaneStats = new javax.swing.JScrollPane();
        jTableStats = new javax.swing.JTable();
        jPanelStatsChartBorder = new javax.swing.JPanel();
        jPanelStatsChart = new jamuz.gui.swing.PanelPieChart();
        jButtonStatsSelect = new javax.swing.JButton();
        jRadioStatRatedOnly = new javax.swing.JRadioButton();
        jRadioStatRating = new javax.swing.JRadioButton();
        jRadioStatCheckedOnly = new javax.swing.JRadioButton();
        jRadiotatStatus = new javax.swing.JRadioButton();
        jRadioStatGenre = new javax.swing.JRadioButton();
        jRadioStatYear = new javax.swing.JRadioButton();
        jRadioStatDecade = new javax.swing.JRadioButton();
        jRadioStatAlbum = new javax.swing.JRadioButton();
        jRadioStatArtist = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jRadioStatPercentRated = new javax.swing.JRadioButton();

        jSliderStatsNbCategories.setMajorTickSpacing(10);
        jSliderStatsNbCategories.setMaximum(20);
        jSliderStatsNbCategories.setMinorTickSpacing(1);
        jSliderStatsNbCategories.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderStatsNbCategories.setPaintLabels(true);
        jSliderStatsNbCategories.setPaintTicks(true);
        jSliderStatsNbCategories.setSnapToTicks(true);
        jSliderStatsNbCategories.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderStatsNbCategoriesStateChanged(evt);
            }
        });

        jTableStats.setModel(new jamuz.gui.swing.TableModel());
        jScrollPaneStats.setViewportView(jTableStats);

        jPanelStatsChartBorder.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jPanelStatsChart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelStatsChartLayout = new javax.swing.GroupLayout(jPanelStatsChart);
        jPanelStatsChart.setLayout(jPanelStatsChartLayout);
        jPanelStatsChartLayout.setHorizontalGroup(
            jPanelStatsChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelStatsChartLayout.setVerticalGroup(
            jPanelStatsChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanelStatsChartBorderLayout = new javax.swing.GroupLayout(jPanelStatsChartBorder);
        jPanelStatsChartBorder.setLayout(jPanelStatsChartBorderLayout);
        jPanelStatsChartBorderLayout.setHorizontalGroup(
            jPanelStatsChartBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatsChartBorderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelStatsChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelStatsChartBorderLayout.setVerticalGroup(
            jPanelStatsChartBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStatsChartBorderLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanelStatsChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("jamuz/Bundle"); // NOI18N
        jButtonStatsSelect.setText(bundle.getString("Button.Select")); // NOI18N
        jButtonStatsSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStatsSelectActionPerformed(evt);
            }
        });

        buttonGroupStat.add(jRadioStatRatedOnly);
        jRadioStatRatedOnly.setText(Inter.get("Stat.RatingRated")); // NOI18N
        jRadioStatRatedOnly.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatRatedOnlyItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadioStatRating);
        jRadioStatRating.setText(Inter.get("Stat.Rating")); // NOI18N
        jRadioStatRating.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatRatingItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadioStatCheckedOnly);
        jRadioStatCheckedOnly.setText(Inter.get("Stat.CheckedChecked")); // NOI18N
        jRadioStatCheckedOnly.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatCheckedOnlyItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadiotatStatus);
        jRadiotatStatus.setText(Inter.get("Stat.Checked")); // NOI18N
        jRadiotatStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadiotatStatusItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadioStatGenre);
        jRadioStatGenre.setText(Inter.get("Tag.Genre")); // NOI18N
        jRadioStatGenre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatGenreItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadioStatYear);
        jRadioStatYear.setText(Inter.get("Tag.Year")); // NOI18N
        jRadioStatYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatYearItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadioStatDecade);
        jRadioStatDecade.setText(Inter.get("Stat.Decade")); // NOI18N
        jRadioStatDecade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatDecadeItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadioStatAlbum);
        jRadioStatAlbum.setText(Inter.get("Tag.Album")); // NOI18N
        jRadioStatAlbum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatAlbumItemStateChanged(evt);
            }
        });

        buttonGroupStat.add(jRadioStatArtist);
        jRadioStatArtist.setText(Inter.get("Tag.Artist")); // NOI18N
        jRadioStatArtist.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatArtistItemStateChanged(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jamuz/ressources/update.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonGroupStat.add(jRadioStatPercentRated);
        jRadioStatPercentRated.setText(Inter.get("Stat.PercentRated")); // NOI18N
        jRadioStatPercentRated.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioStatPercentRatedItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioStatRating)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioStatPercentRated))
                            .addComponent(jRadioStatRatedOnly, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadiotatStatus)
                            .addComponent(jRadioStatCheckedOnly))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioStatDecade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioStatYear))
                            .addComponent(jRadioStatGenre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioStatAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioStatArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanelStatsChartBorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPaneStats, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSliderStatsNbCategories, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonStatsSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioStatRating)
                            .addComponent(jRadiotatStatus)
                            .addComponent(jRadioStatGenre)
                            .addComponent(jRadioStatPercentRated)
                            .addComponent(jRadioStatArtist))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioStatRatedOnly)
                            .addComponent(jRadioStatCheckedOnly)
                            .addComponent(jRadioStatDecade)
                            .addComponent(jRadioStatYear)
                            .addComponent(jRadioStatAlbum)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSliderStatsNbCategories, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStatsSelect))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelStatsChartBorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)))
                .addGap(1, 1, 1)
                .addComponent(jScrollPaneStats, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButtonStatsSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStatsSelectActionPerformed

        //Getting selected File
        int selectedRow = jTableStats.getSelectedRow();
        if (selectedRow >= 0) {
            //convert to model index (as sortable model)
            selectedRow = jTableStats.convertRowIndexToModel(selectedRow);
            
            String stat = getSelectedButtonText(buttonGroupStat);
            String label = stats.get(selectedRow).getLabel();
            String field;
            
            //Set selected
            if(stat.equals(Inter.get("Tag.Genre"))) { //NOI18N
                field="genre";
            }
            else if(stat.equals(Inter.get("Tag.Artist"))) { //NOI18N
                field="artist";
            }
            else if(stat.equals(Inter.get("Tag.Album"))) { //NOI18N
                field="album";
            }
            else {
                field="toto";
                //TODO; This should not happen. Anyway would be better to use a common Enum somehow
            }
            PanelSelect.setSelected(field, label);
        } else {
            Popup.warning(Inter.get("Error.YouMustSelectArow")); 		  //NOI18N
        }
    }//GEN-LAST:event_jButtonStatsSelectActionPerformed

    //TODO: USe a common event handler for buttonGroup as all the same code
    private void jRadioStatRatingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatRatingItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatRatingItemStateChanged

    private void jRadioStatRatedOnlyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatRatedOnlyItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatRatedOnlyItemStateChanged

    private void jRadiotatStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadiotatStatusItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadiotatStatusItemStateChanged

    private void jRadioStatCheckedOnlyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatCheckedOnlyItemStateChanged
       if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatCheckedOnlyItemStateChanged

    private void jRadioStatDecadeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatDecadeItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatDecadeItemStateChanged

    private void jRadioStatYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatYearItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatYearItemStateChanged

    private void jRadioStatArtistItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatArtistItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatArtistItemStateChanged

    private void jRadioStatAlbumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatAlbumItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatAlbumItemStateChanged

    private void jRadioStatGenreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatGenreItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatGenreItemStateChanged

    //False by default as jSliderStatsNbCategories is set to 0 within 
    //GUI auto-generated code, and it is an internal hange
    private static boolean isManual = false;
    
    private void jSliderStatsNbCategoriesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderStatsNbCategoriesStateChanged
        JSlider source = (JSlider) evt.getSource();
//        int position = (int) source.getValue();
        if (!source.getValueIsAdjusting()) {
            if(isManual) { //before panel init completes
                showStatsChartPie(false);
            }
        }
    }//GEN-LAST:event_jSliderStatsNbCategoriesStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        showStatsChartPie();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioStatPercentRatedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioStatPercentRatedItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) {	
            showStatsChartPie();
        }
    }//GEN-LAST:event_jRadioStatPercentRatedItemStateChanged

    private void fillStatTable(String field, String title, ArrayList<StatItem> stats, boolean showChart) {
		jTableStats.setRowSorter(null);
		tableModel.clear();
		String totalSelector;
        String table="file"; //NOI18N
        switch (field) {
            case "checked": //NOI18N
                //NOI18N
                totalSelector=">="+stats.get(0).getValue();  //NOI18N
                table="path"; //NOI18N
                break;
            case "rating": //NOI18N
                //NOI18N
                totalSelector=">="+stats.get(0).getLabel();  //NOI18N
                break;
            default:
                totalSelector="%";  //NOI18N
                break;
        }

        StatItem total=Jamuz.getDb().getStatItem(field, totalSelector, table, "", Color.YELLOW);
        long totalCount = total.getCountFile();

        float percentage;
		ArrayList<PanelPieChart.PieSlice> slices = new ArrayList<>();
		for (StatItem statItem : stats) {
			if(totalCount>0) {
				percentage = statItem.getCountFile() * 100 / totalCount;
			}
			else {
				percentage = 0;
			}
            statItem.setPercentage(percentage);
			this.addRowStats(tableModel, statItem);
			slices.add(new PanelPieChart.PieSlice(statItem.getLabelForChart()+"\t ("+String.valueOf((int)percentage)+"%)", (double) statItem.getCountFile(), statItem.getColor()));  //NOI18N
		}
        
        if(showChart) {
            createChart(title, totalCount, slices);
        }
        jPanelStatsChartBorder.setVisible(showChart);
        jSliderStatsNbCategories.setVisible(showChart);

		//Enable row tableSorter (cannot be done if model is empty)
		if(tableModel.getRowCount()>0) {
			//Enable auto sorter
			jTableStats.setAutoCreateRowSorter(true);
			//Sort by action, result
			TableRowSorter<TableModel> tableSorter = new TableRowSorter<>(tableModel);
			jTableStats.setRowSorter(tableSorter);
			List <RowSorter.SortKey> sortKeys = new ArrayList<>();
			sortKeys.add(new RowSorter.SortKey(0, SortOrder.DESCENDING));
			sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
			tableSorter.setSortKeys(sortKeys);
		}
		else {
			jTableStats.setAutoCreateRowSorter(false);
		}
	}
	
    private void createChart(String title, long total, ArrayList<PanelPieChart.PieSlice> slices) {

		//Sort the list by decreasing value
		Collections.sort(slices);
		
		//Merge minor categories "Other" as requested
		int nbFiles=stats.size();
		if(nbFiles>jSliderStatsNbCategories.getValue()) {
			double otherValue=0;
			ArrayList<PanelPieChart.PieSlice> slicesToDisplay = new ArrayList<>();
			
			for(int i = 0; i < jSliderStatsNbCategories.getValue(); i++) {
				slicesToDisplay.add(slices.get(i));
			}
			//TODO: get subarray instead of recreating another list
			//slices=(ArrayList)slices.subList(0, NbCategories);
			for(int i = jSliderStatsNbCategories.getValue(); i < nbFiles; i++) {
				otherValue+=slices.get(i).getValue();
			}
			float percentage = (float) otherValue * 100 / total;
			slicesToDisplay.add(new PanelPieChart.PieSlice(Inter.get("Label.Other")+"\t ("+String.valueOf((int)percentage)+"%)", otherValue, Color.WHITE));  //NOI18N
			slices=slicesToDisplay;
		}

        Random generator = new Random();
		Color newColor;
		//Add color, now that it is sorted
		for(int i = 0; i < slices.size(); i++) {
			if(slices.get(i).getColor()==null) {
                if(i<myColors.length) {
                    newColor = myColors[i]; 
                }
                else {
                    newColor = new Color(generator.nextInt(256),generator.nextInt(256),generator.nextInt(256)); 
                }
                slices.get(i).setColor(newColor);
            }
		}

		//Create and display chart pie
		PanelPieChart myCharPie = (PanelPieChart) jPanelStatsChart;
		myCharPie.setPie(title, slices);
    }
    
	private void addToStats(String field, String value, Color color) {
		addToStats(field, value, value, color);
	}
	
    private void addRowStats(TableModel myTableModel, StatItem statItem) {
		Object[] donnee = new Object[]{statItem.getCountFile(), statItem.getCountPath(), statItem.getPercentage(), StringManager.humanReadableSeconds(statItem.getLength()), 
            statItem.getRating(), StringManager.humanReadableByteCount(statItem.getSize(), false), statItem.getLabelForChart()};
		myTableModel.addRow(donnee);
    }
    
	private void addToStats(String field, String value, String label, Color color) {
		String table="file";  //NOI18N
		if(field.equals("checked")) {  //NOI18N
			table="path";  //NOI18N
		}
		stats.add(Jamuz.getDb().getStatItem(field, value, table, label, color));
	}
	
    private String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }
    
    private void setDefaultNbCategories() {
        jSliderStatsNbCategories.setEnabled(false);
        setDefaultNbCategories(stats.size(), true);
    }
    
    private void setDefaultNbCategories(int size, boolean setSlider) {
        if(setSlider) {
            isManual = false;
            jSliderStatsNbCategories.setValue(size); 		
            isManual = true;
        }
    }
    
    private void showStatsChartPie() {
        showStatsChartPie(true);
    }
    
	private void showStatsChartPie(boolean setSlider) {
       
        String stat = getSelectedButtonText(buttonGroupStat);
        
		if(stat.equals(Inter.get("Tag.Genre")) || stat.equals(Inter.get("Tag.Artist")) || stat.equals(Inter.get("Tag.Album"))) {  //NOI18N
			jButtonStatsSelect.setVisible(true);
		}
		else {
			jButtonStatsSelect.setVisible(false);
		}
		stats = new ArrayList<>();
        
        boolean showChart=false;
        jSliderStatsNbCategories.setEnabled(true);
        
        String field="";  //NOI18N
        //TODO: Replace if, else if by an enum switch
		if(stat.equals(Inter.get("Stat.Rating"))) { //NOI18N
			field="rating";  //NOI18N
			addToStats(field, "0", Color.WHITE);  //NOI18N
			addToStats(field, "1", Color.RED);  //NOI18N
			addToStats(field, "2", Color.LIGHT_GRAY);  //NOI18N
			addToStats(field, "3", new Color(0,117,220));  //NOI18N
			addToStats(field, "4", new Color(0,92,49));  //NOI18N
			addToStats(field, "5", new Color(43,206,72));  //NOI18N
            showChart=true;
            setDefaultNbCategories();
		}
		else if(stat.equals(Inter.get("Stat.RatingRated"))) { //NOI18N
			field="rating";  //NOI18N
            addToStats(field, "1", Color.RED);  //NOI18N
			addToStats(field, "2", Color.LIGHT_GRAY);  //NOI18N
			addToStats(field, "3", new Color(0,117,220));  //NOI18N
			addToStats(field, "4", new Color(0,92,49));  //NOI18N
			addToStats(field, "5", new Color(43,206,72));  //NOI18N
            showChart=true;
            setDefaultNbCategories();
		}
		else if(stat.equals(Inter.get("Stat.Checked"))) { //NOI18N
			field="checked";  //NOI18N
			for(FolderInfo.CheckedFlag checkedFlag : FolderInfo.CheckedFlag.values()) {
				addToStats(field, String.valueOf(checkedFlag.getValue()), checkedFlag.toString(), checkedFlag.getColor());
			}
            showChart=true;
            setDefaultNbCategories();
		}
        else if(stat.equals(Inter.get("Stat.CheckedChecked"))) { //NOI18N
			field="checked";  //NOI18N
			for(FolderInfo.CheckedFlag checkedFlag : FolderInfo.CheckedFlag.values()) {
				if(!checkedFlag.equals(FolderInfo.CheckedFlag.UNCHECKED)) {
                    addToStats(field, String.valueOf(checkedFlag.getValue()), checkedFlag.toString(), checkedFlag.getColor());
                }
			}
            showChart=true;
            setDefaultNbCategories();
		}
        else if(stat.equals(Inter.get("Stat.PercentRated"))) {
            field="idPath"; //Any field from path will do as =%
            Jamuz.getDb().getPercentRatedForStats(stats);
            showChart=true;
            setDefaultNbCategories();
        }
		else if(stat.equals(Inter.get("Tag.Genre"))) { //NOI18N
			field="genre";  //NOI18N
			Jamuz.getDb().getSelectionList4Stats(stats, field);
            showChart=true;
            setDefaultNbCategories(10, setSlider);
		}
		else if(stat.equals(Inter.get("Tag.Year"))) { //NOI18N
			field="year";  //NOI18N
			Jamuz.getDb().getSelectionList4Stats(stats, field);
            showChart=true;
            setDefaultNbCategories(10, setSlider);
		}
		else if(stat.equals(Inter.get("Tag.Artist"))) { //NOI18N
			field="artist";  //NOI18N
			Jamuz.getDb().getSelectionList4Stats(stats, field);
		}
		else if(stat.equals(Inter.get("Tag.Album"))) { //NOI18N
			field="album";  //NOI18N
            Jamuz.getDb().getSelectionList4Stats(stats, field);
		}
		else if(stat.equals(Inter.get("Stat.Decade"))) { //NOI18N
			field="year";  //NOI18N
			addToStats(field, "", null);  //NOI18N
			for(int i = 190; i < 202; i++) {
				addToStats(field, Integer.toString(i)+"%", null);  //NOI18N
			}
            showChart=true;
            setDefaultNbCategories();
		}
		else {
			//This should never happen (at least in prod) as we have a fixed list
			Popup.warning("Unknown required stat \""+stat+"\""); //NOI18N
		}
        
		fillStatTable(field, stat, stats, showChart);
	}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupStat;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonStatsSelect;
    private javax.swing.JPanel jPanelStatsChart;
    private javax.swing.JPanel jPanelStatsChartBorder;
    private javax.swing.JRadioButton jRadioStatAlbum;
    private javax.swing.JRadioButton jRadioStatArtist;
    private javax.swing.JRadioButton jRadioStatCheckedOnly;
    private javax.swing.JRadioButton jRadioStatDecade;
    private javax.swing.JRadioButton jRadioStatGenre;
    private javax.swing.JRadioButton jRadioStatPercentRated;
    private javax.swing.JRadioButton jRadioStatRatedOnly;
    private javax.swing.JRadioButton jRadioStatRating;
    private javax.swing.JRadioButton jRadioStatYear;
    private javax.swing.JRadioButton jRadiotatStatus;
    private javax.swing.JScrollPane jScrollPaneStats;
    private javax.swing.JSlider jSliderStatsNbCategories;
    private javax.swing.JTable jTableStats;
    // End of variables declaration//GEN-END:variables
}
